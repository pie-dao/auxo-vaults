{"language": "Solidity", "sources": {"VaultFactory.sol": {"content": "//   ______\n//  /      \\\n// /$$$$$$  | __    __  __    __   ______\n// $$ |__$$ |/  |  /  |/  \\  /  | /      \\\n// $$    $$ |$$ |  $$ |$$  \\/$$/ /$$$$$$  |\n// $$$$$$$$ |$$ |  $$ | $$  $$<  $$ |  $$ |\n// $$ |  $$ |$$ \\__$$ | /$$$$  \\ $$ \\__$$ |\n// $$ |  $$ |$$    $$/ /$$/ $$  |$$    $$/\n// $$/   $$/  $$$$$$/  $$/   $$/  $$$$$$/\n//\n// auxo.fi\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.12;\n\nimport {Vault} from \"Vault.sol\";\nimport {ProxyAdmin} from \"ProxyAdmin.sol\";\nimport {TransparentUpgradeableProxy} from \"TransparentUpgradeableProxy.sol\";\n\n/// @title VaultFactory\n/// @notice VaultFactory serves as a factory and controller for vaults implementation and proxies.\ncontract VaultFactory is ProxyAdmin {\n    /// @notice The implementation used to deploy proxies.\n    address private implementation;\n\n    /// @notice Event emitted when a Vault is deployed.\n    event VaultDeployed(address indexed proxy, address indexed underlying, address auth);\n\n    /// @notice Implementation updated\n    event ImplementationUpdated(address implementation);\n\n    /// @notice Get the current implementation.\n    function getImplementation() external view returns (address) {\n        return implementation;\n    }\n\n    /// @notice Set the current implementation.\n    /// @param newImplementation The new implementation.\n    function setImplementation(address newImplementation) external onlyOwner {\n        implementation = newImplementation;\n\n        emit ImplementationUpdated(newImplementation);\n    }\n\n    /// @notice Deploys a new Vault given input data.\n    /// @param underlying The underlying asset.\n    /// @param auth The Auth module used by the Vault.\n    /// @param harvestFeeReceiver The harvest fees receiver.\n    /// @param burnFeeReceiver The batched burns fees receiver.\n    function deployVault(\n        address underlying,\n        address auth,\n        address harvestFeeReceiver,\n        address burnFeeReceiver\n    ) external returns (Vault vault) {\n        TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(\n            implementation,\n            address(this),\n            abi.encodeWithSelector(Vault.initialize.selector, underlying, auth, harvestFeeReceiver, burnFeeReceiver)\n        );\n\n        emit VaultDeployed(address(proxy), underlying, auth);\n\n        return Vault(address(proxy));\n    }\n}\n"}, "Vault.sol": {"content": "//   ______\n//  /      \\\n// /$$$$$$  | __    __  __    __   ______\n// $$ |__$$ |/  |  /  |/  \\  /  | /      \\\n// $$    $$ |$$ |  $$ |$$  \\/$$/ /$$$$$$  |\n// $$$$$$$$ |$$ |  $$ | $$  $$<  $$ |  $$ |\n// $$ |  $$ |$$ \\__$$ | /$$$$  \\ $$ \\__$$ |\n// $$ |  $$ |$$    $$/ /$$/ $$  |$$    $$/\n// $$/   $$/  $$$$$$/  $$/   $$/  $$$$$$/\n//\n// auxo.fi\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.12;\n\nimport {Authority} from \"Auth.sol\";\nimport {IVault} from \"IVault.sol\";\nimport {IStrategy} from \"IStrategy.sol\";\nimport {SafeCastLib as SafeCast} from \"SafeCastLib.sol\";\nimport {FixedPointMathLib as FixedPointMath} from \"FixedPointMathLib.sol\";\nimport {ERC20Upgradeable as ERC20} from \"ERC20Upgradeable.sol\";\nimport {PausableUpgradeable as Pausable} from \"PausableUpgradeable.sol\";\nimport {SafeERC20Upgradeable as SafeERC20} from \"SafeERC20Upgradeable.sol\";\n\n/// @title Vault\n/// @author dantop114\n/// @notice A vault seeking for yield.\ncontract Vault is ERC20, Pausable {\n    using SafeERC20 for ERC20;\n    using SafeCast for uint256;\n    using FixedPointMath for uint256;\n\n    /*///////////////////////////////////////////////////////////////\n                              IMMUTABLES\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice The Vault's token symbol prefix.\n    bytes internal constant S_PREFIX = bytes(\"auxo\");\n\n    /// @notice The Vault's token name prefix.\n    bytes internal constant N_PREFIX = bytes(\"Auxo \");\n\n    /// @notice The Vault's token name suffix.\n    bytes internal constant N_SUFFIX = bytes(\" Vault\");\n\n    /// @notice Max number of strategies the Vault can handle.\n    uint256 internal constant MAX_STRATEGIES = 20;\n\n    /// @notice Vault's API version.\n    string public constant VERSION = \"0.2\";\n\n    /*///////////////////////////////////////////////////////////////\n                        STRUCTS DECLARATIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev Packed struct of strategy data.\n    /// @param trusted Whether the strategy is trusted.\n    /// @param balance The amount of underlying tokens held in the strategy.\n    struct StrategyData {\n        // Used to determine if the Vault will operate on a strategy.\n        bool trusted;\n        // Used to determine profit and loss during harvests of the strategy.\n        uint248 balance;\n    }\n\n    /// @dev Struct for batched burning events.\n    /// @param totalShares Shares to burn during the event.\n    /// @param amountPerShare Underlying amount per share (this differs from exchangeRate at the moment of batched burning).\n    struct BatchBurn {\n        uint256 totalShares;\n        uint256 amountPerShare;\n    }\n\n    /// @dev Struct for users' batched burning requests.\n    /// @param round Batched burning event index.\n    /// @param shares Shares to burn for the user.\n    struct BatchBurnReceipt {\n        uint256 round;\n        uint256 shares;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Blocks mined in a year.\n    uint256 public blocksPerYear;\n\n    /// @notice Vault Auth module.\n    Authority public auth;\n\n    /// @notice The underlying token the vault accepts.\n    ERC20 public underlying;\n\n    /// @notice The underlying token decimals.\n    uint8 public underlyingDecimals;\n\n    /// @notice The base unit of the underlying token and hence the Vault share token.\n    /// @dev Equal to 10 ** underlyingDecimals. Used for fixed point arithmetic.\n    uint256 public baseUnit;\n\n    /// @notice The percentage of profit recognized each harvest to reserve as fees.\n    /// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n    uint256 public harvestFeePercent;\n\n    /// @notice The address receiving harvest fees (denominated in Vault's shares).\n    address public harvestFeeReceiver;\n\n    /// @notice The percentage of shares recognized each burning to reserve as fees.\n    /// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n    uint256 public burningFeePercent;\n\n    /// @notice The address receiving burning fees (denominated in Vault's shares).\n    address public burningFeeReceiver;\n\n    /// @notice The period in seconds during which multiple harvests can occur\n    /// regardless if they are taking place before the harvest delay has elapsed.\n    /// @dev Long harvest delays open up the Vault to profit distribution DOS attacks.\n    uint128 public harvestWindow;\n\n    /// @notice The period in seconds over which locked profit is unlocked.\n    /// @dev Cannot be 0 as it opens harvests up to sandwich attacks.\n    uint64 public harvestDelay;\n\n    /// @notice The value that will replace harvestDelay next harvest.\n    /// @dev In the case that the next delay is 0, no update will be applied.\n    uint64 public nextHarvestDelay;\n\n    /// @notice The total amount of underlying tokens held in strategies at the time of the last harvest.\n    /// @dev Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\n    uint256 public totalStrategyHoldings;\n\n    /// @notice Maps strategies to data the Vault holds on them.\n    mapping(IStrategy => StrategyData) public getStrategyData;\n\n    /// @notice Exchange rate at the beginning of latest harvest window\n    uint256 public lastHarvestExchangeRate;\n\n    /// @notice Latest harvest interval in blocks\n    uint256 public lastHarvestIntervalInBlocks;\n\n    /// @notice The block number when the first harvest in the most recent harvest window occurred.\n    uint256 public lastHarvestWindowStartBlock;\n\n    /// @notice A timestamp representing when the first harvest in the most recent harvest window occurred.\n    /// @dev May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\n    uint64 public lastHarvestWindowStart;\n\n    /// @notice A timestamp representing when the most recent harvest occurred.\n    uint64 public lastHarvest;\n\n    /// @notice The amount of locked profit at the end of the last harvest.\n    uint128 public maxLockedProfit;\n\n    /// @notice An ordered array of strategies representing the withdrawal queue.\n    /// @dev The queue is processed in descending order, meaning the last index will be withdrawn from first.\n    /// @dev There are not sanity checks on the withdrawal queue, so any control should be done off-chain.\n    IStrategy[] public withdrawalQueue;\n\n    /// @notice Current batched burning round.\n    uint256 public batchBurnRound;\n\n    /// @notice Balance reserved to batched burning withdrawals.\n    uint256 public batchBurnBalance;\n\n    /// @notice Maps user's address to withdrawal request.\n    mapping(address => BatchBurnReceipt) public userBatchBurnReceipts;\n\n    /// @notice Maps social burning events rounds to batched burn details.\n    mapping(uint256 => BatchBurn) public batchBurns;\n\n    /// @notice Amount of shares a single address can hold.\n    uint256 public userDepositLimit;\n\n    /// @notice Amount of underlying cap for this vault.\n    uint256 public vaultDepositLimit;\n\n    /// @notice Estimated return recorded during last harvest.\n    uint256 public estimatedReturn;\n\n    /*///////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Emitted when the Authority module is updated.\n    /// @param newAuth The new Authority module.\n    event AuthUpdated(Authority newAuth);\n\n    /// @notice Emitted when the fee percentage is updated.\n    /// @param newFeePercent The new fee percentage.\n    event HarvestFeePercentUpdated(uint256 newFeePercent);\n\n    /// @notice Emitted when the batched burning fee percentage is updated.\n    /// @param newFeePercent The new fee percentage.\n    event BurningFeePercentUpdated(uint256 newFeePercent);\n\n    /// @notice Emitted when harvest fees receiver is updated.\n    /// @param receiver The new receiver\n    event HarvestFeeReceiverUpdated(address indexed receiver);\n\n    /// @notice Emitted when burning fees receiver is updated.\n    /// @param receiver The new receiver\n    event BurningFeeReceiverUpdated(address indexed receiver);\n\n    //// @notice Emitted when the harvest window is updated.\n    //// @param newHarvestWindow The new harvest window.\n    event HarvestWindowUpdated(uint128 newHarvestWindow);\n\n    /// @notice Emitted when the harvest delay is updated.\n    /// @param account The address changing the harvest delay\n    /// @param newHarvestDelay The new harvest delay.\n    event HarvestDelayUpdated(address indexed account, uint64 newHarvestDelay);\n\n    /// @notice Emitted when the harvest delay is scheduled to be updated next harvest.\n    /// @param newHarvestDelay The scheduled updated harvest delay.\n    event HarvestDelayUpdateScheduled(uint64 newHarvestDelay);\n\n    /// @notice Emitted when the withdrawal queue is updated.\n    /// @param replacedWithdrawalQueue The new withdrawal queue.\n    event WithdrawalQueueSet(IStrategy[] replacedWithdrawalQueue);\n\n    /// @notice Emitted when a strategy is set to trusted.\n    /// @param strategy The strategy that became trusted.\n    event StrategyTrusted(IStrategy indexed strategy);\n\n    /// @notice Emitted when a strategy is set to untrusted.\n    /// @param strategy The strategy that became untrusted.\n    event StrategyDistrusted(IStrategy indexed strategy);\n\n    /// @notice Emitted when underlying tokens are deposited into the vault.\n    /// @param from The user depositing into the vault.\n    /// @param to The user receiving Vault's shares.\n    /// @param value The shares `to` is receiving.\n    event Deposit(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Emitted after a user enters a batched burn round.\n    /// @param round Batched burn round.\n    /// @param account User's address.\n    /// @param amount Amount of shares to be burned.\n    event EnterBatchBurn(uint256 indexed round, address indexed account, uint256 amount);\n\n    /// @notice Emitted after a user exits a batched burn round.\n    /// @param round Batched burn round.\n    /// @param account User's address.\n    /// @param amount Amount of underlying redeemed.\n    event ExitBatchBurn(uint256 indexed round, address indexed account, uint256 amount);\n\n    /// @notice Emitted after a batched burn event happens.\n    /// @param round Batched burn round.\n    /// @param executor User that executes the batch burn.\n    /// @param shares Total amount of burned shares.\n    /// @param amount Total amount of underlying redeemed.\n    event ExecuteBatchBurn(uint256 indexed round, address indexed executor, uint256 shares, uint256 amount);\n\n    /// @notice Emitted after a successful harvest.\n    /// @param account The harvester address.\n    /// @param strategies The set of strategies.\n    event Harvest(address indexed account, IStrategy[] strategies);\n\n    /// @notice Emitted after the Vault deposits into a strategy contract.\n    /// @param account The address depositing funds into the strategy.\n    /// @param strategy The strategy that was deposited into.\n    /// @param underlyingAmount The amount of underlying tokens that were deposited.\n    event StrategyDeposit(address indexed account, IStrategy indexed strategy, uint256 underlyingAmount);\n\n    /// @notice Emitted after the Vault withdraws funds from a strategy contract.\n    /// @param account The user pulling funds from the strategy\n    /// @param strategy The strategy that was withdrawn from.\n    /// @param underlyingAmount The amount of underlying tokens that were withdrawn.\n    event StrategyWithdrawal(address indexed account, IStrategy indexed strategy, uint256 underlyingAmount);\n\n    /// @notice Event emitted when the deposit limits are updated.\n    /// @param perUser New underlying limit per address.\n    /// @param perVault New underlying limit per vault.\n    event DepositLimitsUpdated(uint256 perUser, uint256 perVault);\n\n    /*///////////////////////////////////////////////////////////////\n                            MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    modifier requiresAuth(address addr) {\n        require(auth.canCall(addr, address(this), msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    INITIALIZER AND PAUSE TRIGGER\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Triggers the Vault's pause\n    /// @dev Only owner can call this method.\n    function triggerPause() external requiresAuth(msg.sender) {\n        paused() ? _unpause() : _pause();\n    }\n\n    /// @notice Internal initializer method.\n    /// @param underlying_ The underlying token the vault accepts.\n    /// @param auth_ The Auth mo    dule that will be used for this Vault.\n    /// @param harvestFeeReceiver_ The harvesting fee receiver address.\n    /// @param burnFeeReceiver_ The batched burns fee receiver address.\n    /// @param name_ The Vault shares' name.\n    /// @param symbol_ The Vault shares' symbol.\n    function __Vault_init(\n        ERC20 underlying_,\n        Authority auth_,\n        address harvestFeeReceiver_,\n        address burnFeeReceiver_,\n        string memory name_,\n        string memory symbol_\n    ) internal initializer {\n        // Initialize ERC20 trait.\n        __ERC20_init(name_, symbol_);\n\n        // Initialize Pausable trait.\n        __Pausable_init();\n\n        // Initialize Pausable trait.\n        _pause();\n\n        // Initialize the storage.\n        underlying = underlying_;\n        baseUnit = 10**underlying_.decimals();\n        underlyingDecimals = underlying_.decimals();\n\n        auth = auth_;\n        burningFeeReceiver = burnFeeReceiver_;\n        harvestFeeReceiver = harvestFeeReceiver_;\n\n        // Sets batchBurnRound to 1.\n        // NOTE: needed to have 0 as an uninitialized withdraw request.\n        batchBurnRound = 1;\n    }\n\n    /// @notice The initialize method\n    /// @param underlying_ The underlying token the vault accepts.\n    /// @param auth_ The Auth module that will be used for this Vault.\n    /// @param harvestFeeReceiver_ The harvesting fee receiver address.\n    /// @param burnFeeReceiver_ The batched burns fee receiver address.\n    function initialize(\n        ERC20 underlying_,\n        Authority auth_,\n        address harvestFeeReceiver_,\n        address burnFeeReceiver_\n    ) external initializer {\n        // Initialize the Vault.\n        __Vault_init(\n            underlying_,\n            auth_,\n            harvestFeeReceiver_,\n            burnFeeReceiver_,\n            string(bytes.concat(N_PREFIX, bytes(underlying_.name()), N_SUFFIX)),\n            string(bytes.concat(S_PREFIX, bytes(underlying_.symbol())))\n        );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        DECIMAL OVERRIDING\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Overrides `decimals` method.\n    /// @dev Needed because Openzeppelin's logic for decimals.\n    /// @return Vault's shares token decimals (underlying token decimals).\n    function decimals() public view override returns (uint8) {\n        return underlyingDecimals;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    UNDERLYING CAP CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set new deposit limits for this vault.\n    /// @param user New user deposit limit.\n    /// @param vault New vault deposit limit.\n    function setDepositLimits(uint256 user, uint256 vault) external requiresAuth(msg.sender) {\n        userDepositLimit = user;\n        vaultDepositLimit = vault;\n\n        emit DepositLimitsUpdated(user, vault);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        AUTH CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set a new Authority module.\n    /// @param newAuth The new Authority module.\n    function setAuth(Authority newAuth) external requiresAuth(msg.sender) {\n        auth = newAuth;\n        emit AuthUpdated(newAuth);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                     BLOCKS PER YEAR CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Sets blocks per year.\n    /// @param blocks Blocks in a given year.\n    function setBlocksPerYear(uint256 blocks) external requiresAuth(msg.sender) {\n        blocksPerYear = blocks;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           FEE CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set a new fee percentage.\n    /// @param newFeePercent The new fee percentage.\n    function setHarvestFeePercent(uint256 newFeePercent) external requiresAuth(msg.sender) {\n        // A fee percentage over 100% doesn't make sense.\n        require(newFeePercent <= 1e18, \"setHarvestFeePercent::FEE_TOO_HIGH\");\n\n        // Update the fee percentage.\n        harvestFeePercent = newFeePercent;\n\n        emit HarvestFeePercentUpdated(newFeePercent);\n    }\n\n    /// @notice Set a new burning fee percentage.\n    /// @param newFeePercent The new fee percentage.\n    function setBurningFeePercent(uint256 newFeePercent) external requiresAuth(msg.sender) {\n        // A fee percentage over 100% doesn't make sense.\n        require(newFeePercent <= 1e18, \"setBatchedBurningFeePercent::FEE_TOO_HIGH\");\n\n        // Update the fee percentage.\n        burningFeePercent = newFeePercent;\n\n        emit BurningFeePercentUpdated(newFeePercent);\n    }\n\n    /// @notice Set a new harvest fees receiver.\n    /// @param harvestFeeReceiver_ The new harvest fees receiver.\n    function setHarvestFeeReceiver(address harvestFeeReceiver_) external requiresAuth(msg.sender) {\n        // Update the fee percentage.\n        harvestFeeReceiver = harvestFeeReceiver_;\n\n        emit HarvestFeeReceiverUpdated(harvestFeeReceiver_);\n    }\n\n    /// @notice Set a new burning fees receiver.\n    /// @param burningFeeReceiver_ The new burning fees receiver.\n    function setBurningFeeReceiver(address burningFeeReceiver_) external requiresAuth(msg.sender) {\n        // Update the fee percentage.\n        burningFeeReceiver = burningFeeReceiver_;\n\n        emit BurningFeeReceiverUpdated(burningFeeReceiver_);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        HARVEST CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set a new harvest window.\n    /// @param newHarvestWindow The new harvest window.\n    /// @dev The Vault's harvestDelay must already be set before calling.\n    function setHarvestWindow(uint128 newHarvestWindow) external requiresAuth(msg.sender) {\n        // A harvest window longer than the harvest delay doesn't make sense.\n        require(newHarvestWindow <= harvestDelay, \"setHarvestWindow::WINDOW_TOO_LONG\");\n\n        // Update the harvest window.\n        harvestWindow = newHarvestWindow;\n\n        emit HarvestWindowUpdated(newHarvestWindow);\n    }\n\n    /// @notice Set a new harvest delay delay.\n    /// @param newHarvestDelay The new harvest delay to set.\n    /// @dev If the current harvest delay is 0, meaning it has not\n    /// been set before, it will be updated immediately; otherwise\n    /// it will be scheduled to take effect after the next harvest.\n    function setHarvestDelay(uint64 newHarvestDelay) external requiresAuth(msg.sender) {\n        // A harvest delay of 0 makes harvests vulnerable to sandwich attacks.\n        require(newHarvestDelay != 0, \"setHarvestDelay::DELAY_CANNOT_BE_ZERO\");\n\n        // A target harvest delay over 1 year doesn't make sense.\n        require(newHarvestDelay <= 365 days, \"setHarvestDelay::DELAY_TOO_LONG\");\n\n        // If the harvest delay is 0, meaning it has not been set before:\n        if (harvestDelay == 0) {\n            // We'll apply the update immediately.\n            harvestDelay = newHarvestDelay;\n\n            emit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n        } else {\n            // We'll apply the update next harvest.\n            nextHarvestDelay = newHarvestDelay;\n\n            emit HarvestDelayUpdateScheduled(newHarvestDelay);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        WITHDRAWAL QUEUE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Gets the full withdrawal queue.\n    /// @return An ordered array of strategies representing the withdrawal queue.\n    /// @dev This is provided because Solidity converts public arrays into index getters,\n    /// but we need a way to allow external contracts and users to access the whole array.\n    function getWithdrawalQueue() external view returns (IStrategy[] memory) {\n        return withdrawalQueue;\n    }\n\n    /// @notice Set the withdrawal queue.\n    /// @param newQueue The new withdrawal queue.\n    /// @dev There are no sanity checks on the `newQueue` argument so they should be done off-chain.\n    function setWithdrawalQueue(IStrategy[] calldata newQueue) external requiresAuth(msg.sender) {\n        // Check for duplicated in queue\n        require(newQueue.length <= MAX_STRATEGIES, \"setWithdrawalQueue::QUEUE_TOO_BIG\");\n\n        // Replace the withdrawal queue.\n        withdrawalQueue = newQueue;\n\n        emit WithdrawalQueueSet(newQueue);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                      STRATEGY TRUST/DISTRUST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Store a strategy as trusted, enabling it to be harvested.\n    /// @param strategy The strategy to make trusted.\n    function trustStrategy(IStrategy strategy) external requiresAuth(msg.sender) {\n        // Ensure the strategy accepts the correct underlying token.\n        // If the strategy accepts ETH the Vault should accept WETH, it'll handle wrapping when necessary.\n        require(strategy.underlying() == underlying, \"trustStrategy::WRONG_UNDERLYING\");\n\n        // Store the strategy as trusted.\n        getStrategyData[strategy].trusted = true;\n\n        emit StrategyTrusted(strategy);\n    }\n\n    /// @notice Store a strategy as untrusted, disabling it from being harvested.\n    /// @param strategy The strategy to make untrusted.\n    function distrustStrategy(IStrategy strategy) external requiresAuth(msg.sender) {\n        // Store the strategy as untrusted.\n        getStrategyData[strategy].trusted = false;\n\n        emit StrategyDistrusted(strategy);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            DEPOSIT/BURN\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit a specific amount of underlying tokens.\n    /// @dev User needs to approve `underlyingAmount` of underlying tokens to spend.\n    /// @param to The address to receive shares corresponding to the deposit.\n    /// @param underlyingAmount The amount of the underlying token to deposit.\n    /// @return shares The amount of shares minted using `underlyingAmount`.\n    function deposit(address to, uint256 underlyingAmount) external requiresAuth(to) returns (uint256 shares) {\n        _deposit(to, (shares = calculateShares(underlyingAmount)), underlyingAmount);\n    }\n\n    /// @notice Enter a batched burn event.\n    /// @dev Each user can take part to one batched burn event a time.\n    /// @dev User's shares amount will be staked until the burn happens.\n    /// @param shares Shares to withdraw during the next batched burn event.\n    function enterBatchBurn(uint256 shares) external {\n        uint256 batchBurnRound_ = batchBurnRound;\n        uint256 userRound = userBatchBurnReceipts[msg.sender].round;\n\n        if (userRound == 0) {\n            // user is depositing for the first time in this round\n            // so we set his round to current round\n\n            userBatchBurnReceipts[msg.sender].round = batchBurnRound_;\n            userBatchBurnReceipts[msg.sender].shares = shares;\n        } else {\n            // user is not depositing for the first time or took part in a previous round:\n            //      - first case: we stack the deposits.\n            //      - second case: revert, user needs to withdraw before requesting\n            //                     to take part in another round.\n\n            require(userRound == batchBurnRound_, \"enterBatchBurn::DIFFERENT_ROUNDS\");\n            userBatchBurnReceipts[msg.sender].shares += shares;\n        }\n\n        batchBurns[batchBurnRound_].totalShares += shares;\n\n        require(transfer(address(this), shares));\n\n        emit EnterBatchBurn(batchBurnRound_, msg.sender, shares);\n    }\n\n    /// @notice Withdraw underlying redeemed in batched burning events.\n    function exitBatchBurn() external {\n        uint256 batchBurnRound_ = batchBurnRound;\n        BatchBurnReceipt memory receipt = userBatchBurnReceipts[msg.sender];\n\n        require(receipt.round != 0, \"exitBatchBurn::NO_DEPOSITS\");\n        require(receipt.round < batchBurnRound_, \"exitBatchBurn::ROUND_NOT_EXECUTED\");\n\n        userBatchBurnReceipts[msg.sender].round = 0;\n        userBatchBurnReceipts[msg.sender].shares = 0;\n\n        uint256 underlyingAmount = receipt.shares.fmul(batchBurns[receipt.round].amountPerShare, baseUnit);\n\n        batchBurnBalance -= underlyingAmount;\n        underlying.safeTransfer(msg.sender, underlyingAmount);\n\n        emit ExitBatchBurn(batchBurnRound_, msg.sender, underlyingAmount);\n    }\n\n    /// @notice Execute batched burns\n    function execBatchBurn() external requiresAuth(msg.sender) {\n        // let's wait for lockedProfit to go to 0\n        require(block.timestamp >= (lastHarvest + harvestDelay), \"batchBurn::LATEST_HARVEST_NOT_EXPIRED\");\n\n        uint256 batchBurnRound_ = batchBurnRound++;\n\n        BatchBurn memory batchBurn = batchBurns[batchBurnRound_];\n        uint256 totalShares = batchBurn.totalShares;\n\n        // burning 0 shares is not convenient\n        require(totalShares != 0, \"batchBurn::TOTAL_SHARES_CANNOT_BE_ZERO\");\n\n        uint256 underlyingAmount = totalShares.fmul(exchangeRate(), baseUnit);\n        require(underlyingAmount <= totalFloat(), \"batchBurn::NOT_ENOUGH_UNDERLYING\");\n\n        _burn(address(this), totalShares);\n\n        // Compute fees and transfer underlying amount if any\n        if (burningFeePercent != 0) {\n            uint256 accruedFees = underlyingAmount.fmul(burningFeePercent, 10**18);\n            underlyingAmount -= accruedFees;\n\n            underlying.safeTransfer(burningFeeReceiver, accruedFees);\n        }\n\n        batchBurns[batchBurnRound_].amountPerShare = underlyingAmount.fdiv(totalShares, baseUnit);\n        batchBurnBalance += underlyingAmount;\n\n        emit ExecuteBatchBurn(batchBurnRound_, msg.sender, totalShares, underlyingAmount);\n    }\n\n    /// @dev Internal function to deposit into the Vault.\n    /// @param to The address to receive shares corresponding to the deposit.\n    /// @param shares The amount of Vault's shares to mint.\n    /// @param underlyingAmount The amount of the underlying token to deposit.\n    function _deposit(\n        address to,\n        uint256 shares,\n        uint256 underlyingAmount\n    ) internal virtual whenNotPaused {\n        uint256 userUnderlying = calculateUnderlying(balanceOf(to)) + underlyingAmount;\n        uint256 vaultUnderlying = totalUnderlying() + underlyingAmount;\n\n        require(userUnderlying <= userDepositLimit, \"_deposit::USER_DEPOSIT_LIMITS_REACHED\");\n        require(vaultUnderlying <= vaultDepositLimit, \"_deposit::VAULT_DEPOSIT_LIMITS_REACHED\");\n\n        // Determine te equivalent amount of shares and mint them\n        _mint(to, shares);\n\n        emit Deposit(msg.sender, to, underlyingAmount);\n\n        // Transfer in underlying tokens from the user.\n        // This will revert if the user does not have the amount specified.\n        underlying.safeTransferFrom(msg.sender, address(this), underlyingAmount);\n    }\n\n    /// @notice Calculates the amount of Vault's shares for a given amount of underlying tokens.\n    /// @param underlyingAmount The underlying token's amount.\n    /// @return The amount of shares given `underlyingAmount`.\n    function calculateShares(uint256 underlyingAmount) public view returns (uint256) {\n        return underlyingAmount.fdiv(exchangeRate(), baseUnit);\n    }\n\n    /// @notice Calculates the amount of underlying tokens corresponding to a given amount of Vault's shares.\n    /// @param sharesAmount The shares amount.\n    /// @return The amount of underlying given `sharesAmount`.\n    function calculateUnderlying(uint256 sharesAmount) public view returns (uint256) {\n        return sharesAmount.fmul(exchangeRate(), baseUnit);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                             HARVEST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Harvest a set of trusted strategies.\n    /// @param strategies The trusted strategies to harvest.\n    /// @dev Will always revert if called outside of an active\n    /// harvest window or before the harvest delay has passed.\n    function harvest(IStrategy[] calldata strategies) external requiresAuth(msg.sender) {\n        // If this is the first harvest after the last window:\n        if (block.timestamp >= lastHarvest + harvestDelay) {\n            // Accounts for:\n            //    - harvest interval (from latest harvest)\n            //    - harvest exchange rate\n            //    - harvest window starting block\n            lastHarvestExchangeRate = exchangeRate();\n            lastHarvestIntervalInBlocks = block.number - lastHarvestWindowStartBlock;\n            lastHarvestWindowStartBlock = block.number;\n\n            // Set the harvest window's start timestamp.\n            lastHarvestWindowStart = uint64(block.timestamp);\n        } else {\n            // We know this harvest is not the first in the window so we need to ensure it's within it.\n            require(block.timestamp <= lastHarvestWindowStart + harvestWindow, \"harvest::BAD_HARVEST_TIME\");\n        }\n\n        // Get the Vault's current total strategy holdings.\n        uint256 oldTotalStrategyHoldings = totalStrategyHoldings;\n\n        // Used to store the total profit accrued by the strategies.\n        uint256 totalProfitAccrued;\n\n        // Used to store the new total strategy holdings after harvesting.\n        uint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\n\n        // Will revert if any of the specified strategies are untrusted.\n        for (uint256 i = 0; i < strategies.length; i++) {\n            // Get the strategy at the current index.\n            IStrategy strategy = strategies[i];\n\n            // If an untrusted strategy could be harvested a malicious user could use\n            // a fake strategy that over-reports holdings to manipulate the exchange rate.\n            require(getStrategyData[strategy].trusted, \"harvest::UNTRUSTED_STRATEGY\");\n\n            // Get the strategy's previous and current balance.\n            uint256 balanceLastHarvest = getStrategyData[strategy].balance;\n            uint256 balanceThisHarvest = strategy.estimatedUnderlying();\n\n            // Update the strategy's stored balance.\n            getStrategyData[strategy].balance = balanceThisHarvest.safeCastTo248();\n\n            // Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\n            // We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\n            newTotalStrategyHoldings = newTotalStrategyHoldings + balanceThisHarvest - balanceLastHarvest;\n\n            // Update the total profit accrued while counting losses as zero profit.\n            totalProfitAccrued += balanceThisHarvest > balanceLastHarvest\n                ? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\n                : 0; // If the strategy registered a net loss we don't have any new profit.\n        }\n\n        // Compute fees as the fee percent multiplied by the profit.\n        uint256 feesAccrued = totalProfitAccrued.fmul(harvestFeePercent, 1e18);\n\n        // If we accrued any fees, mint an equivalent amount of Vault's shares.\n        if (feesAccrued != 0 && harvestFeeReceiver != address(0)) {\n            _mint(harvestFeeReceiver, feesAccrued.fdiv(exchangeRate(), baseUnit));\n        }\n\n        // Update max unlocked profit based on any remaining locked profit plus new profit.\n        uint128 maxLockedProfit_ = (lockedProfit() + totalProfitAccrued - feesAccrued).safeCastTo128();\n        maxLockedProfit = maxLockedProfit_;\n\n        // Compute estimated returns\n        uint256 strategyHoldings = newTotalStrategyHoldings - uint256(maxLockedProfit_);\n        estimatedReturn = computeEstimatedReturns(strategyHoldings, uint256(maxLockedProfit_), lastHarvestIntervalInBlocks);\n\n        // Set strategy holdings to our new total.\n        totalStrategyHoldings = newTotalStrategyHoldings;\n\n        // Update the last harvest timestamp.\n        lastHarvest = uint64(block.timestamp);\n\n        emit Harvest(msg.sender, strategies);\n\n        // Get the next harvest delay.\n        uint64 newHarvestDelay = nextHarvestDelay;\n\n        // If the next harvest delay is not 0:\n        if (newHarvestDelay != 0) {\n            // Update the harvest delay.\n            harvestDelay = newHarvestDelay;\n\n            // Reset the next harvest delay.\n            nextHarvestDelay = 0;\n\n            emit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    STRATEGY DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit a specific amount of float into a trusted strategy.\n    /// @param strategy The trusted strategy to deposit into.\n    /// @param underlyingAmount The amount of underlying tokens in float to deposit.\n    function depositIntoStrategy(IStrategy strategy, uint256 underlyingAmount) external requiresAuth(msg.sender) {\n        // A strategy must be trusted before it can be deposited into.\n        require(getStrategyData[strategy].trusted, \"depositIntoStrategy::UNTRUSTED_STRATEGY\");\n\n        // We don't allow depositing 0 to prevent emitting a useless event.\n        require(underlyingAmount != 0, \"depositIntoStrategy::AMOUNT_CANNOT_BE_ZERO\");\n\n        // Increase totalStrategyHoldings to account for the deposit.\n        totalStrategyHoldings += underlyingAmount;\n\n        // Without this the next harvest would count the deposit as profit.\n        getStrategyData[strategy].balance += underlyingAmount.safeCastTo248();\n\n        emit StrategyDeposit(msg.sender, strategy, underlyingAmount);\n\n        // Approve underlyingAmount to the strategy so we can deposit.\n        underlying.safeApprove(address(strategy), underlyingAmount);\n\n        // Deposit into the strategy and revert if it returns an error code.\n        require(strategy.deposit(underlyingAmount) == 0, \"depositIntoStrategy::MINT_FAILED\");\n    }\n\n    /// @notice Withdraw a specific amount of underlying tokens from a strategy.\n    /// @param strategy The strategy to withdraw from.\n    /// @param underlyingAmount  The amount of underlying tokens to withdraw.\n    /// @dev Withdrawing from a strategy will not remove it from the withdrawal queue.\n    function withdrawFromStrategy(IStrategy strategy, uint256 underlyingAmount) external requiresAuth(msg.sender) {\n        // A strategy must be trusted before it can be withdrawn from.\n        require(getStrategyData[strategy].trusted, \"withdrawFromStrategy::UNTRUSTED_STRATEGY\");\n\n        // We don't allow withdrawing 0 to prevent emitting a useless event.\n        require(underlyingAmount != 0, \"withdrawFromStrategy::AMOUNT_CANNOT_BE_ZERO\");\n\n        // Without this the next harvest would count the withdrawal as a loss.\n        getStrategyData[strategy].balance -= underlyingAmount.safeCastTo248();\n\n        // Decrease totalStrategyHoldings to account for the withdrawal.\n        totalStrategyHoldings -= underlyingAmount;\n\n        emit StrategyWithdrawal(msg.sender, strategy, underlyingAmount);\n\n        // Withdraw from the strategy and revert if returns an error code.\n        require(strategy.withdraw(underlyingAmount) == 0, \"withdrawFromStrategy::REDEEM_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                ACCOUNTING\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the amount of underlying tokens a share can be redeemed for.\n    /// @return The amount of underlying tokens a share can be redeemed for.\n    function exchangeRate() public view returns (uint256) {\n        // Get the total supply of shares.\n        uint256 shareSupply = totalSupply();\n\n        // If there are no shares in circulation, return an exchange rate of 1:1.\n        if (shareSupply == 0) return baseUnit;\n\n        return totalUnderlying().fdiv(shareSupply, baseUnit);\n    }\n\n    /// @notice Returns a user's Vault balance in underlying tokens.\n    /// @param user THe user to get the underlying balance of.\n    /// @return The user's Vault balance in underlying tokens.\n    function balanceOfUnderlying(address user) external view returns (uint256) {\n        return calculateUnderlying(balanceOf(user));\n    }\n\n    /// @notice Returns the amount of underlying tokens that idly sit in the Vault.\n    /// @return The amount of underlying tokens that sit idly in the Vault.\n    function totalFloat() public view returns (uint256) {\n        return underlying.balanceOf(address(this)) - batchBurnBalance;\n    }\n\n    /// @notice Calculate the current amount of locked profit.\n    /// @return The current amount of locked profit.\n    function lockedProfit() public view returns (uint256) {\n        // Get the last harvest and harvest delay.\n        uint256 previousHarvest = lastHarvest;\n        uint256 harvestInterval = harvestDelay;\n\n        // If the harvest delay has passed, there is no locked profit.\n        if (block.timestamp >= previousHarvest + harvestInterval) return 0;\n\n        // Get the maximum amount we could return.\n        uint256 maximumLockedProfit = maxLockedProfit;\n\n        // Compute how much profit remains locked based on the last harvest and harvest delay.\n        return maximumLockedProfit - (maximumLockedProfit * (block.timestamp - previousHarvest)) / harvestInterval;\n    }\n\n    /// @notice Calculates the total amount of underlying tokens the Vault holds.\n    /// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\n    function totalUnderlying() public view virtual returns (uint256) {\n        return totalStrategyHoldings - lockedProfit() + totalFloat();\n    }\n\n    /// @notice Compute an estimated return given the auxoToken supply, initial exchange rate and locked profits.\n    /// @param invested The underlying deposited in strategies.\n    /// @param profit The profit derived from harvest.\n    /// @param interval The period during which `profit` was generated.\n    function computeEstimatedReturns(\n        uint256 invested,\n        uint256 profit,\n        uint256 interval\n    ) internal view returns (uint256) {\n        return (invested == 0 || profit == 0) ? 0 : profit.fdiv(invested, baseUnit) * (blocksPerYear / interval) * 100;\n    }\n}\n"}, "Auth.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\nabstract contract Auth {\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\n\n    address public owner;\n\n    Authority public authority;\n\n    constructor(address _owner, Authority _authority) {\n        owner = _owner;\n        authority = _authority;\n\n        emit OwnerUpdated(msg.sender, _owner);\n        emit AuthorityUpdated(msg.sender, _authority);\n    }\n\n    modifier requiresAuth() {\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\n\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\n    }\n\n    function setAuthority(Authority newAuthority) public virtual {\n        // We check if the caller is the owner first because we want to ensure they can\n        // always swap out the authority even if it's reverting or using up a lot of gas.\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\n\n        authority = newAuthority;\n\n        emit AuthorityUpdated(msg.sender, newAuthority);\n    }\n\n    function setOwner(address newOwner) public virtual requiresAuth {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\ninterface Authority {\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) external view returns (bool);\n}\n"}, "IVault.sol": {"content": "//   ______\n//  /      \\\n// /$$$$$$  | __    __  __    __   ______\n// $$ |__$$ |/  |  /  |/  \\  /  | /      \\\n// $$    $$ |$$ |  $$ |$$  \\/$$/ /$$$$$$  |\n// $$$$$$$$ |$$ |  $$ | $$  $$<  $$ |  $$ |\n// $$ |  $$ |$$ \\__$$ | /$$$$  \\ $$ \\__$$ |\n// $$ |  $$ |$$    $$/ /$$/ $$  |$$    $$/\n// $$/   $$/  $$$$$$/  $$/   $$/  $$$$$$/\n//\n// auxo.fi\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {IERC20Upgradeable as IERC20} from \"IERC20Upgradeable.sol\";\n\n/// @title IVault\n/// @notice Basic MonoVault interface.\n/// @dev This interface should not change frequently and can be used to code interactions\n///      for the users of the Vault. Admin functions are available through the `VaultBase` contract.\ninterface IVault is IERC20 {\n    /*///////////////////////////////////////////////////////////////\n                              Vault API Version\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice The API version the vault implements\n    function version() external view returns (string memory);\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20Detailed\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice The Vault shares token name.\n    function name() external view returns (string calldata);\n\n    /// @notice The Vault shares token symbol.\n    function symbol() external view returns (string calldata);\n\n    /// @notice The Vault shares token decimals.\n    function decimals() external view returns (uint8);\n\n    /*///////////////////////////////////////////////////////////////\n                              Batched burns\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev Struct for users' batched burning requests.\n    /// @param round Batched burning event index.\n    /// @param shares Shares to burn for the user.\n    struct BatchBurnReceipt {\n        uint256 round;\n        uint256 shares;\n    }\n\n    /// @dev Struct for batched burning events.\n    /// @param totalShares Shares to burn during the event.\n    /// @param amountPerShare Underlying amount per share (this differs from exchangeRate at the moment of batched burning).\n    struct BatchBurn {\n        uint256 totalShares;\n        uint256 amountPerShare;\n    }\n\n    /// @notice Current batched burning round.\n    function batchBurnRound() external view returns (uint256);\n\n    /// @notice Maps user's address to withdrawal request.\n    function userBatchBurnReceipt(address account) external view returns (BatchBurnReceipt memory);\n\n    /// @notice Maps social burning events rounds to batched burn details.\n    function batchBurns(uint256 round) external view returns (BatchBurn memory);\n\n    /// @notice Enter a batched burn event.\n    /// @dev Each user can take part to one batched burn event a time.\n    /// @dev User's shares amount will be staked until the burn happens.\n    /// @param shares Shares to withdraw during the next batched burn event.\n    function enterBatchBurn(uint256 shares) external;\n\n    /// @notice Withdraw underlying redeemed in batched burning events.\n    function exitBatchBurn() external;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC4626-like\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice The underlying token the vault accepts\n    function underlying() external view returns (IERC20);\n\n    /// @notice Deposit a specific amount of underlying tokens.\n    /// @dev User needs to approve `underlyingAmount` of underlying tokens to spend.\n    /// @param to The address to receive shares corresponding to the deposit.\n    /// @param underlyingAmount The amount of the underlying token to deposit.\n    /// @return shares The amount of shares minted using `underlyingAmount`.\n    function deposit(address to, uint256 underlyingAmount) external returns (uint256);\n\n    /// @notice Deposit a specific amount of underlying tokens.\n    /// @dev User needs to approve `underlyingAmount` of underlying tokens to spend.\n    /// @param to The address to receive shares corresponding to the deposit.\n    /// @param shares The amount of Vault's shares to mint.\n    /// @return underlyingAmount The amount needed to mint `shares` amount of shares.\n    function mint(address to, uint256 shares) external returns (uint256);\n\n    /// @notice Returns a user's Vault balance in underlying tokens.\n    /// @param user THe user to get the underlying balance of.\n    /// @return The user's Vault balance in underlying tokens.\n    function balanceOfUnderlying(address user) external view returns (uint256);\n\n    /// @notice Calculates the amount of Vault's shares for a given amount of underlying tokens.\n    /// @param underlyingAmount The underlying token's amount.\n    function calculateShares(uint256 underlyingAmount) external view returns (uint256);\n\n    /// @notice Calculates the amount of underlying tokens corresponding to a given amount of Vault's shares.\n    /// @param sharesAmount The shares amount.\n    function calculateUnderlying(uint256 sharesAmount) external view returns (uint256);\n\n    /// @notice Returns the amount of underlying tokens a share can be redeemed for.\n    /// @return The amount of underlying tokens a share can be redeemed for.\n    function exchangeRate() external view returns (uint256);\n\n    /// @notice Returns the amount of underlying tokens that idly sit in the Vault.\n    /// @return The amount of underlying tokens that sit idly in the Vault.\n    function totalFloat() external view returns (uint256);\n\n    /// @notice Calculate the current amount of locked profit.\n    /// @return The current amount of locked profit.\n    function lockedProfit() external view returns (uint256);\n\n    /// @notice Calculates the total amount of underlying tokens the Vault holds.\n    /// @return The total amount of underlying tokens the Vault holds.\n    function totalUnderlying() external view returns (uint256);\n\n    /// @notice Returns an estimated return for the vault.\n    /// @dev This method should not be used to get a precise estimate.\n    /// @return A formatted APR value\n    function estimatedReturn() external view returns (uint256);\n}\n"}, "IERC20Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}, "IStrategy.sol": {"content": "//   ______\n//  /      \\\n// /$$$$$$  | __    __  __    __   ______\n// $$ |__$$ |/  |  /  |/  \\  /  | /      \\\n// $$    $$ |$$ |  $$ |$$  \\/$$/ /$$$$$$  |\n// $$$$$$$$ |$$ |  $$ | $$  $$<  $$ |  $$ |\n// $$ |  $$ |$$ \\__$$ | /$$$$  \\ $$ \\__$$ |\n// $$ |  $$ |$$    $$/ /$$/ $$  |$$    $$/\n// $$/   $$/  $$$$$$/  $$/   $$/  $$$$$$/\n//\n// auxo.fi\n\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {IERC20Upgradeable as IERC20} from \"IERC20Upgradeable.sol\";\n\nimport {IVault} from \"IVault.sol\";\n\n/// @title IStrategy\n/// @notice Basic Vault Strategy interface.\ninterface IStrategy {\n    /*///////////////////////////////////////////////////////////////\n                             GENERAL INFO\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The strategy name.\n    function name() external view returns (string calldata);\n\n    /// @notice The Vault managing this strategy.\n    function vault() external view returns (IVault);\n\n    /*///////////////////////////////////////////////////////////////\n                            DEPOSIT/WITHDRAW\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Deposit a specific amount of underlying tokens.\n    function deposit(uint256) external returns (uint8);\n\n    /// @notice Withdraw a specific amount of underlying tokens.\n    function withdraw(uint256) external returns (uint8);\n\n    /*///////////////////////////////////////////////////////////////\n                            ACCOUNTING\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The underlying token the strategy accepts.\n    function underlying() external view returns (IERC20);\n\n    /// @notice The amount deposited by the Vault in this strategy.\n    function depositedUnderlying() external returns (uint256);\n\n    /// @notice An estimate amount of underlying managed by the strategy.\n    function estimatedUnderlying() external returns (uint256);\n}\n"}, "SafeCastLib.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Safe unsigned integer casting library that reverts on overflow.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeCastLib.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\nlibrary SafeCastLib {\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\n        require(x <= type(uint248).max);\n\n        y = uint248(x);\n    }\n\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\n        require(x <= type(uint128).max);\n\n        y = uint128(x);\n    }\n\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\n        require(x <= type(uint96).max);\n\n        y = uint96(x);\n    }\n\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\n        require(x <= type(uint64).max);\n\n        y = uint64(x);\n    }\n\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\n        require(x <= type(uint32).max);\n\n        y = uint32(x);\n    }\n}\n"}, "FixedPointMathLib.sol": {"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\nlibrary FixedPointMathLib {\n    /*///////////////////////////////////////////////////////////////\n                            COMMON BASE UNITS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant YAD = 1e8;\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant RAD = 1e45;\n\n    /*///////////////////////////////////////////////////////////////\n                         FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function fmul(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(x == 0 || (x * y) / x == y)\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\n                revert(0, 0)\n            }\n\n            // If baseUnit is zero this will return zero instead of reverting.\n            z := div(z, baseUnit)\n        }\n    }\n\n    function fdiv(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * baseUnit in z for now.\n            z := mul(x, baseUnit)\n\n            // Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\n            if iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\n                revert(0, 0)\n            }\n\n            // We ensure y is not zero above, so there is never division by zero here.\n            z := div(z, y)\n        }\n    }\n\n    function fpow(\n        uint256 x,\n        uint256 n,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := baseUnit\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store baseUnit in z for now.\n                    z := baseUnit\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, baseUnit)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, baseUnit)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, baseUnit)\n                    }\n                }\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z)\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z)\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z)\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"}, "ERC20Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20Upgradeable.sol\";\nimport \"IERC20MetadataUpgradeable.sol\";\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"}, "IERC20MetadataUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"}, "ContextUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"}, "Initializable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"}, "PausableUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"ContextUpgradeable.sol\";\nimport \"Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"}, "SafeERC20Upgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20Upgradeable.sol\";\nimport \"AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"}, "AddressUpgradeable.sol": {"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "ProxyAdmin.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"TransparentUpgradeableProxy.sol\";\nimport \"Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"}, "TransparentUpgradeableProxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"}, "ERC1967Proxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Proxy.sol\";\nimport \"ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"}, "Proxy.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"}, "ERC1967Upgrade.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"IBeacon.sol\";\nimport \"Address.sol\";\nimport \"StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"}, "IBeacon.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"}, "Address.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}, "StorageSlot.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"}, "Ownable.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"}, "Context.sol": {"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}}, "settings": {"evmVersion": "istanbul", "optimizer": {"enabled": true, "runs": 200}}}